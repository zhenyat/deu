require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/nouns", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Noun. As you add validations to Noun, be sure to
  # adjust the attributes here as well.
  let(:part_of_speech) { FactoryBot.create(:part_of_speech) }
  let(:gender) { FactoryBot.create(:gender) }
  let(:valid_attributes) {
    { de: 'MyString', en: 'MyString', ru: 'MyString', part_of_speech_id: part_of_speech.id, gender_id: gender.id  }
    # let(:valid_attributes) { { "description" => "MyText", "patient_id" => :patientid, "surgeon_id" => :surgeon.id, "anaesthetist_id" => :anaesthetist.id, "hospital_id" => :hospital.id } 
  }
  
  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response" do
      Noun.create! valid_attributes
      I18n.available_locales.each do |locale|
        # Not working...
        # get nouns_url, locale: "#{locale}"
        # get nouns_url, params: { locale: 'en' }
        # expect(response).to be_successful
      end
    end
  end
end

